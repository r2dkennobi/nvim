[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts=1
let g:airline_theme ="tender"
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#showbuffers=1
let g:airline#extensions#branch#enabled=1
'''
depends = 'vim-airline-themes'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'rhysd/vim-grammarous'

[[plugins]]
repo = 'pearofducks/ansible-vim'

[[plugins]]
repo = 'jeetsukumaran/vim-filebeagle'
hook_add = '''
let g:filebeagle_suppress_keymaps = 1
map <silent> - <Plug>FileBeagleOpenCurrentBufferDir
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = '0'

[[plugins]]
repo = 'powerline/fonts'
build = './install.sh'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
noremap <Leader>f :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-u': 'split',
  \ 'ctrl-h': 'vsplit'}

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>b :call fzf#run({
  \   'source':  reverse(<sid>buflist()),
  \   'sink':    function('<sid>bufopen'),
  \   'options': '+m',
  \   'down':    len(<sid>buflist()) + 2
  \ })<CR>

command! -bang -nargs=* FZFAg
  \ call fzf#vim#ag(<q-args>, '--skip-vcs-ignores', {'down': '~40%'})
noremap <Leader>g :FZFAg<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_open_list = 0
let g:airline#extentions#ale#enabled = 1
let g:ale_c_build_dir='/home/kenny/shield/code/pikachu/workspace/build'
let g:ale_linters = {
\   'cpp': ['clang', 'clangcheck', 'clangtidy', 'cppcheck', 'clang-format', 'cpplint']
\}
let g:ale_cpp_clangcheck_options="-extra-arg -Xanalyzer -extra-arg -analyzer-output=text"
let g:ale_c_clang_options="-std=c++1y -Wall -I/opt/ros/kinetic/include -I/home/kenny/shield/code/pikachu/workspace/devel/include"
let g:ale_cpp_clang_options="-std=c++1y -Wall -I/opt/ros/kinetic/include -I/home/kenny/shield/code/pikachu/workspace/devel/include"

nmap <silent> <C-p> <Plug>(ale_previous_wrap)
nmap <silent> <C-n> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
depends = 'deoplete.vim'

[[plugins]]
repo = 'tweekmonster/deoplete-clang2'
on_ft = ['c', 'cpp', 'cmake']
depends = 'depolete.vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'skielbasa/vim-material-monokai'

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
'''
# Extra note: https://hackernoon.com/my-neovim-setup-for-go-7f7b6e805876

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
